@page "/register"

@using System.Diagnostics;
@using System.IO;
@using System;


@inject IToastService toastService;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager;

<div class="card my-card">
    <div class="card-title">
        <h3>Register</h3>
    </div>

    <div class="card-body">
        <EditForm Model="@registerModel" OnValidSubmit="@CreateAccount">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label>First Name</label>
                <InputText class="form-control" @bind-Value="registerModel.FirstName" />
            </div>
            <div>
                <label>Last Name</label>
                <InputText class="form-control" @bind-Value="registerModel.LastName" />
            </div>
            <div>
                <label>Email</label>
                <InputText class="form-control" @bind-Value="registerModel.Email" />
            </div>
            <div>
                <label>Password</label>
                <InputText type="password" class="form-control" @bind-Value="registerModel.Password" />
            </div>
            <div>
                <label>Choose a profile image</label>
                <InputFile OnChange="@HandleSelected" />
            </div>
            <div>
                <button class="btn btn-primary form-control">Create account</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private RegisterDto registerModel = new();
    private IBrowserFile imageFile;


    private async Task CreateAccount()
    {
        var timer = new Stopwatch();
        timer.Start();

        var profilePhotoContent = await GetProfilePhotoContentAsync();
        if (profilePhotoContent != null)
        {
            registerModel.ProfilePhotoContent = profilePhotoContent;
        }

        var byteArrayContent = ByteArrayContentHelper.ConvertToByteArrayContent(registerModel);
        var result = await this.httpClient.PostAsync("accounts/register", byteArrayContent);
        timer.Stop();
        Console.WriteLine($"elapsed seconds: {timer.Elapsed.TotalSeconds}");

        if (result.StatusCode == HttpStatusCode.Created)
        {
            navigationManager.NavigateTo("/login");
        }
        else if (result.StatusCode == HttpStatusCode.Conflict)
        {
            toastService.ShowError("A user with the same email already exists!");
        }

        registerModel = new(); // clear the form


        //TODO find some cute background images
    }

    private void HandleSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
    }

    private async Task<byte[]> GetProfilePhotoContentAsync()
    {
        if (imageFile != null)
        {
            var resizedFile = await imageFile.RequestImageFileAsync(
                "image/png", Constants.ImageWidth, Constants.ImageHeight);
            using (var source = resizedFile.OpenReadStream(resizedFile.Size))
            {
                using (var stream = new MemoryStream())
                {
                    await source.CopyToAsync(stream);
                    return stream.ToArray();
                }
            }
        }
        return null!;
    }
}
